[{"content":"表之间的关系 一对一 例如，用户表和用户信息表(不常用的信息)\n实现方式: 在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)\n一对多(多对一) 例如：一个部门有多个员工，多个员工属于一个部门\n实现方式：在多的一方添加一个外键，指向一的主键,例如 在员工表里添加一个部门ID外键，指向部门表的主键\n多对多 例如：商品和订单，一个订单多个商品，一个商品多个订单\n实现方式：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\n订单表\nid 支付金额 支付方式 状态 1 114514.0 WeChatPay 未支付 2 19198.0 AliPay 已支付 商品表\nid 商品名 价格 1 林檎 114514 2 迎宾酒 1919810 中间表\nid 订单id(外键) 商品id(外键) 1 1 1 2 1 2 3 2 1 注解：以上方三表为例，中间表记录订单与商品的外键。两个订单id为1的数据代表着这个订单有两件商品\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 -- 订单与商品关联例子 create table if not exists orders ( id int auto_increment primary key, payment int not null, paytype varchar(20) not null, status varchar(20) not null ); create table if not exists goods ( id int auto_increment primary key, name varchar(60) not null, price int not null ); create table if not exists tk_orders_goods ( id int auto_increment primary key, order_id int not null, good_id int not null ); -- 添加外键 alter table tk_orders_goods add constraint fk_order_id FOREIGN KEY(order_id) REFERENCES orders(id); -- 添加外键 alter table tk_orders_goods add constraint fk_good_id FOREIGN KEY(good_id) REFERENCES goods(id); ","date":"2022-09-30T21:44:20+08:00","permalink":"https://eoezora.github.io/posts/mysql-note/mysql-note-3/","title":"Mysql笔记-数据库设计-表之间的关系"},{"content":"约束概念 约束是作用于表中列的规则，用于限制加入表的数据 约束的存在保证数据库数据的正确性，有限性和完整性 约束的分类 约束名称 功能描述 关键字 非空约束 保证列中数据不出现null NOT NULL 唯一约束 保证列中数据各不相同，唯一性 UNIQUE 主键约束 主键是一行数据的唯一标识，要求非空且唯一 PRIMARY KEY 默认约束 保存数据时,未指定就采用默认值 DEFAULT 外键约束 外键让两个表的数据之间建立连接，保证数据一致且完整 FOREIGN KEY 例子 1 2 3 4 5 6 7 8 9 10 11 12 -- 建表时对字段进行约束 CREATE TABLE emp( id INT PRIMARY KEY, -- 唯一主键 ename VARCHAR(60) NOT NULL UNIQUE, -- 非空且唯一 joindate DATE NOT NULL, -- 非空 salary DOUBLE(7,2) NOT NULL, -- 非空 bonus DOUBLE(7,2) DEFAULT 0, -- 默认为0 -- 部门id dept_id INT NOT NULL, -- 添加外键dept_id并关联dept表的id主键 CONSTRAINF fk_emp_dept FOREIGN KEY(dept_id) REFERENCES dept(id) ); 外键约束 员工表(emp)\nid name age dep_id 1 张三 22 1 2 李四 23 1 3 王五 24 2 4 赵六 25 2 部门表(dept)\nid dep_name addr 1 研发部 研发部地址 2 产品部 产品部地址 ","date":"2022-09-29T21:44:20+08:00","permalink":"https://eoezora.github.io/posts/mysql-note/mysql-note-2/","title":"Mysql笔记-约束"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 SELECT -- 字段列表 FROM -- 表名列表 WHERE -- 条件列表 GROUP BY -- 分组列表 HAVING -- 分组后条件 ORDER BY -- 排序字段 LIMIT -- 限制查询返回数据的数量，用于分页限制 条件查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -- 查询表里许所有数据,不建议使用 SELECT * FROM users; -- 查询名字 -- DISTINCT 去除重复 SELECT DISTINCT name FROM users; -- 查询名字，性别，年龄 -- 可以使用 sex as 性别 的方式对列起别名,也可以写成 sex 性别 省略as 但字段名跟别名之间要有空格隔开 SELECT name, sex as 性别, age as 年龄 FROM users; -- 条件查询符号, NULL值比较使用 IS NOT NULL 跟 IS NULL SELECT name FROM users WHERE age \u0026gt; 17; -- 查询age数值大于17的数据 SELECT name FROM users WHERE age \u0026gt;= 7 AND age \u0026lt;= 50; -- 查询age数值在7跟50之间的数值(写法一) SELECT name FROM users WHERE age BETWEEN 7 AND 50; -- 查询age数值在7跟50之间的数值(写法二) -- 查询brith_day数值在\u0026#39;2000-01-01\u0026#39;跟\u0026#39;2000-04-01\u0026#39;之间的数值(写法二) SELECT name FROM users WHERE brith_day BETWEEN \u0026#39;2000-01-01\u0026#39; AND \u0026#39;2000-04-01\u0026#39;; SELECT name FROM users WHERE age = 17; -- 查询age数值等于17的数据 SELECT name FROM users WHERE age != 17; -- 查询age数值不等于17的数据(写法一) SELECT name FROM users WHERE age \u0026lt;\u0026gt; 17; -- 查询age数值不等于17的数据(写法二) SELECT name FROM users WHERE age = 17 OR age = 18 OR age = 22;-- 查询age数值等于17或18或22的数据(写法一) SELECT name FROM users WHERE age IN (17，18，22); -- 查询age数值等于17或18或22的数据(写法二) SELECT name FROM users WHERE age IS NULL; -- 查询age数值为null的数据 SELECT name FROM users WHERE age IS NOT NULL; -- 查询age数值不为null的数据 SELECT name FROM users WHERE age IS NULL -- 查询age数值为null的数据 /* 通配符 _ 下划线代表单个字符 % 百分号代表任意个数字符 */ -- 查询姓为 蔡 的名字信息 SELECT name FROM users WHERE name like \u0026#39;蔡%\u0026#39;; -- 查询名字 第二个字是 徐 的名字信息 SELECT name FROM users WHERE name like \u0026#39;_徐%\u0026#39;; -- 查询名字中包含坤的名字信息 SELECT name FROM users WHERE name like \u0026#39;%坤%\u0026#39;; 排序查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -- 排序查询语法 SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1]，排序字段名2 [排序方式2]...; -- 排序方式 -- ASC 升序排列[默认] -- DESC 降序排列 -- 升序排序例子 SELECT name FROM users ORDER BY age ASC; -- 降序排序例子 SELECT name FROM users ORDER BY age DESC; -- 多字段降序排序例子 -- 如果年龄一样，则按工资升序排序 SELECT name FROM users ORDER BY age DESC, money ASC; 分组查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 -- 聚合函数查询 count(列名) -- 统计数量 max(列名) -- 最大值 min(列名) -- 最小值 sum(列名) -- 求和 avg(列名) -- 求平均值 -- 聚合函数查询语法 SELECT 聚合函数(列名)... FROM users; SELECT COUNT(name) FROM users; -- 统计name有几个，不能为空，不会统计null值 SELECT MAX(age) FROM users； -- 求年龄最大的 SELECT MIN(age) FROM users； -- 求年龄最小的 SELECT SUM(money) FROM users； -- 求一整列的 money 和 SELECT AVG(money) FROM users； -- 求一整列的 money 的平均值 -- 分组查询 -- 根据性别分组查询平均工资 SELECT sex, avg(money) FROM users GROUP BY sex; -- 根据性别分组查询平均工资，只计算工资高于5000的数据 SELECT sex, avg(money) FROM users WHERE money \u0026gt; 5000 GROUP BY sex; -- 根据性别分组查询平均工资，只计算工资高于5000的数据, 且数据大于2条 SELECT sex, avg(money) FROM users WHERE money \u0026gt; 5000 GROUP BY sex HAVING COUNT(*) \u0026gt; 2; 分页查询 1 2 3 4 5 6 7 -- 语法 SELECT name SELECT name FROM users LIMIT 起始索引，查询数目量; -- 从0开始查，查询3条数据 SELECT name FROM users LIMIT 0，3; -- 分页查询 SELECT name FROM users LIMIT (当前页面 -1) * 每页显示条目数，每页显示条目数; ","date":"2022-09-29T20:29:56+08:00","permalink":"https://eoezora.github.io/posts/mysql-note/mysql-note-1/","title":"Mysql笔记-单表查询"},{"content":"关键字 break 终止循环\ncontinue 跳过本次循环，回到循环条件判断\n内存分配 栈 方法运行时使用的内存，方法进栈运行，运行完出栈\n堆 new出来的都在堆内存中开新空间\n方法区 存储可以运行的class文件\n本地方法栈 Jvm在使用操作系统功能时使用、\n寄存器 给CPU使用，与开发无关\n基本数据类型 整数类型\n浮点数型\n布尔类型\n字符类型\n数据存在自己的内存空间中，赋值给其他变量时是真实的值\n1 2 3 int a = 100; int b = a; //改变b不影响a 引用数据类型 除了基本数据类型之外的所有类型，只要是new出来的都是引用数据类型，变量存储的是内存地址\n1 2 3 4 5 6 7 8 9 10 public static void main(String[] args) { int a[] = {1,2,3,4,5,6}; a(a); System.out.println(a[0]); } public static void a(int[] v) { //此处的v是指向数组a的地址， v[0] = 100; } ","date":"2022-08-10T01:00:00+02:00","permalink":"https://eoezora.github.io/posts/a-test-post/","title":"第一篇测试文章"}]