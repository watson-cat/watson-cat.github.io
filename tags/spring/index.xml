<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>spring on 学習のメモ</title>
    <link>https://eoezora.github.io/tags/spring/</link>
    <description>Recent content in spring on 学習のメモ</description>
    <image>
      <url>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eoezora.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaWEB笔记-SpringMVC</title>
      <link>https://eoezora.github.io/posts/spring/spring-mvc/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-mvc/</guid>
      <description>快速入门 SpringMVC与Tomcat整合 需要注意的是Tomcat 10与spring mvc不兼容. 请使用tomcat 8
导入maven坐标 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax-servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 创建控制类 //@Controller 注解表示这是一个Spring Bean @Controller public class AccountController { //访问入口 @RequestMapping(&amp;#34;/sign-in&amp;#34;) //设置返回值为响应内容 @ResponseBody public String OnAccountSignIn() { System.out.println(&amp;#34;Account: Sign In&amp;#34;); return &amp;#34;{&amp;#39;msg&amp;#39;:&amp;#39;success&amp;#39;}&amp;#34;; } } 创建Spring配置类 /** * Spring配置类 * 设置组件扫描路径,加载Bean */ @Configuration @ComponentScan(&amp;#34;com.eoezora&amp;#34;) public class SpringConfig { } 初始化Servlet容器, 加载SpringMVC环境,并设置SpringMVC技术处理的请求 /** * 定义一个Servlet容器启动的配置类,在里面加载Spring的配置 */ public class ServletContainersInitConfig extends AbstractDispatcherServletInitializer { /** * 加载Spring mvc 容器配置 * SpringMVC的配置 */ @Override protected WebApplicationContext createServletApplicationContext() { AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext(); //SpringMVConfig.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring事务</title>
      <link>https://eoezora.github.io/posts/spring/spring-%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-%E4%BA%8B%E5%8A%A1/</guid>
      <description>简介 事务作用: 在数据层保证一系列数据库操作同时成功或同时失败
Spring事务作用: 在数据层或业务层的一些列数据库操作同时成功或同时失败
例子 通过相同的数据源DataSource来管理sql的事务
在业务层的接口上, 要添加Spring事务的方法上添加注解 @Transactional, 一般是使用在业务层接口上,不会用在实现类上. @Transactional也可以使用在类上,使用在类上表示该类所有方法都开启事务 设置事务管理器 @Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(); transactionManager.setDataSource(dataSource); return transactionManager; } 在Spring设置里打开注解事务驱动 //开起启用注解事务 @EnableTransactionManagement //事务简单例子 //本方法中有三个事务分别是 test_Tran() print_a() print_b() //在实际运行中print_a()和print_b()会加入到test_Tran()中形成一个新的事务, 从而实现print_a()和print_b()的同时成功或同时失败 @Transactional public void test_Tran(){ common.print_a(); //... common.print_b(); } class common { @Transactional public void print_a() { sout(&amp;#34;2333&amp;#34;); } @Transactional public void print_b() { sout(&amp;#34;12345&amp;#34;); } } 事务角色 事务管理员: 发起事务方, 在Spring中通常指代业务开始事务的方法
事务协调员: 加入事务方, 在Spring中通常指数据层方法,也可以是业务层方法</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring整合mybatis</title>
      <link>https://eoezora.github.io/posts/spring/spring-%E6%95%B4%E5%90%88mybatis/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-%E6%95%B4%E5%90%88mybatis/</guid>
      <description>Maven坐标 &amp;lt;!--德鲁伊连接池--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.13-SNSAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--数据库连接组件--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mybatis--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.11&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring操作数据库需要的--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring整合mybatis需要的--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; JDBC配置类 public class JDBCConfig { @Value(&amp;#34;${jdbc.url}&amp;#34;) private String url; @Value(&amp;#34;${jdbc.username}&amp;#34;) private String username; @Value(&amp;#34;${jdbc.password}&amp;#34;) private String password; private String driverClass = &amp;#34;com.mysql.jdbc.Driver&amp;#34;; @Bean public DataSource dataSource() { DruidDataSource druidDataSource = new DruidDataSource(); druidDataSource.setDriverClassName(driverClass); druidDataSource.setUrl(url); druidDataSource.setUsername(username); druidDataSource.setPassword(password); return druidDataSource; } } Mybatis配置类 public class MybatisConfig { @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource) { //创建SqlSessionFactoryBean SqlSessionFactoryBean sfb = new SqlSessionFactoryBean(); //设置mybatis别名扫描 sfb.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring-AOP</title>
      <link>https://eoezora.github.io/posts/spring/spring-aop%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-aop%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>简介 AOP: 面向切面编程, 一种编程范式,指导开发者如何组织程序结构
作用: 在不惊动原始设计的基础上进行功能增强
Spring理念: 无入侵式\无侵入式 编程
代理(Proxy): 本质是采用代理模式实现
切入点(PointCut): 匹配连接点的式子, 可以理解成共性功能的方法描述
连接点(JoinPoint): 可以被增强的方法, 可以理解成任意方法
通知(Advice): 要添加的功能, 共性功能,
切面(Aspect): 把通知应用到切入点的过程
目标对象(Target): 被代理的原始对象的目标对象
简单例子 Spring自带aop相关依赖,这里只需要导入Aspectj即可
导入Maven坐标 &amp;lt;!--aspectj坐标--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.9.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 通知类 /** * 通知类 * @Aspect 告诉Spring这是个AOP增强 */ @Component @Aspect public class AOPAdvice { /** * 定义一个 &amp;lt;切入点&amp;gt; * @Pointcut 切入点注解 * &amp;#34;execution(void com.eoezora.aop_spring.dao.BookDao.update())&amp;#34; 执行目标包下的某个方法 */ @Pointcut(&amp;#34;execution(void com.eoezora.aop_spring.dao.BookDao.update())&amp;#34;) private void commonUpdate() {} /** * 定义一个 &amp;lt;通知&amp;gt; 方法 * @Before 在方法执行前通知 * @After 在方法执行后通知 * @AfterReturning 放回后通知 * @AfterThrowing 发生异常后通知 * @Around 在方法执行前和执行后通知 */ @Before(&amp;#34;commonUpdate()&amp;#34;) public void commonMethod() { System.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring核心容器</title>
      <link>https://eoezora.github.io/posts/spring/spring-ioc%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-ioc%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>控制反转Ioc 使用对象时,由主动new产生对象转换为由外部提供对象, 此过程中创建对象控制权由程序转移到外部,此思想称为控制反转
Spring对Ioc思想的实现
Spring提供了一个容器,称为Ioc容器，用来充当Ioc思想中的&amp;quot;外部&amp;quot; Ioc容器负责对象创建,初始化等一系工作, 被创建或被管理的对象在Ioc容器中被称为Bean DI(Dependency Injection): 依赖注入
在容器中建立的Bean与Bean之间的依赖关系的整个过程,称为依赖注入 目标: 充分解耦
使用Ioc容器管理Bean 在Ioc容器内将有依赖关系的Bean进行关系绑定(DI) 适合给容器管理的Bean
表现层对象 业务层对象 数据层对象 工具对象 不适合给容器管理的Bean
封装实体的域对象 xml配置Bean 一个Bean配置文件
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;!--id为Bean名字--&amp;gt; &amp;lt;!--name 为bean起别名--&amp;gt; &amp;lt;!--Class是bean接口对应实现类--&amp;gt; &amp;lt;!--scope时bean的作用范围,默认singleton单例 | prototype非单例 --&amp;gt; &amp;lt;bean id=&amp;#34;bookInfo&amp;#34; class=&amp;#34;com.eoezora.springdemo.dao.impl.PysBookImpl&amp;#34;/&amp;gt; &amp;lt;!--id为Bean名字 Class是bean接口对应实现类--&amp;gt; &amp;lt;bean id=&amp;#34;bookService&amp;#34; class=&amp;#34;com.eoezora.springdemo.services.impl.BookServerImpl&amp;#34;&amp;gt; &amp;lt;!--配置当前Bean的属性--&amp;gt; &amp;lt;!--name属性表示配置哪一个属性--&amp;gt; &amp;lt;!--ref表示参照哪个Bean--&amp;gt; &amp;lt;property name=&amp;#34;bookInfo&amp;#34; ref=&amp;#34;bookInfo&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; Java使用代码
public static void main(String[] args) { //根据配置文件获取IoC容器 ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;#34;applicationContext.xml&amp;#34;); //ctx.getBean(bean的id); BookService bookService = (BookService) ctx.</description>
    </item>
    
  </channel>
</rss>
