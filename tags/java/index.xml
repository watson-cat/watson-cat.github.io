<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>java on 学習のメモ</title>
    <link>https://eoezora.github.io/tags/java/</link>
    <description>Recent content in java on 学習のメモ</description>
    <image>
      <url>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 09 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eoezora.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaWEB笔记-Spring核心容器</title>
      <link>https://eoezora.github.io/posts/spring/spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>控制反转Ioc 使用对象时,由主动new产生对象转换为由外部提供对象, 此过程中创建对象控制权由程序转移到外部,此思想称为控制反转
Spring对Ioc思想的实现
Spring提供了一个容器,称为Ioc容器，用来充当Ioc思想中的&amp;quot;外部&amp;quot; Ioc容器负责对象创建,初始化等一系工作, 被创建或被管理的对象在Ioc容器中被称为Bean DI(Dependency Injection): 依赖注入
在容器中建立的Bean与Bean之间的依赖关系的整个过程,称为依赖注入 目标: 充分解耦
使用Ioc容器管理Bean 在Ioc容器内将有依赖关系的Bean进行关系绑定(DI) 适合给容器管理的Bean
表现层对象 业务层对象 数据层对象 工具对象 不适合给容器管理的Bean
封装实体的域对象 xml配置Bean 一个Bean配置文件
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;!--id为Bean名字--&amp;gt; &amp;lt;!--name 为bean起别名--&amp;gt; &amp;lt;!--Class是bean接口对应实现类--&amp;gt; &amp;lt;!--scope时bean的作用范围,默认singleton单例 | prototype非单例 --&amp;gt; &amp;lt;bean id=&amp;#34;bookInfo&amp;#34; class=&amp;#34;com.eoezora.springdemo.dao.impl.PysBookImpl&amp;#34;/&amp;gt; &amp;lt;!--id为Bean名字 Class是bean接口对应实现类--&amp;gt; &amp;lt;bean id=&amp;#34;bookService&amp;#34; class=&amp;#34;com.eoezora.springdemo.services.impl.BookServerImpl&amp;#34;&amp;gt; &amp;lt;!--配置当前Bean的属性--&amp;gt; &amp;lt;!--name属性表示配置哪一个属性--&amp;gt; &amp;lt;!--ref表示参照哪个Bean--&amp;gt; &amp;lt;property name=&amp;#34;bookInfo&amp;#34; ref=&amp;#34;bookInfo&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; Java使用代码
public static void main(String[] args) { //根据配置文件获取IoC容器 ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;#34;applicationContext.xml&amp;#34;); //ctx.getBean(bean的id); BookService bookService = (BookService) ctx.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-会话跟踪技术</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF/</guid>
      <description>会话 会话:客户端跟服务端的连接,会话建立后直到一方断开连接才会结束.在一次会话中可以包含多次请求和响应 会话跟踪:服务端会识别多个请求是否来自同一个客户端,以便在同次会话的多次请求间共享数据 HTTP协议是无状态的,每次客户端向服务端请求时。服务端都会将该请求视为新的请求,因此我们需要会话跟踪技术来实现会话内数据共享 实现方式: 客户端会话跟踪技术: Cookie 服务端跟会话踪技术: Session Cokkie 客户端会话技术,将数据保存在客户端,以后每次请求都携带Cookie数据进行访问
基本使用 @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //创建Cookie对象 Cookie cookie = new Cookie(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //发送cookie到客户端 response.addCookie(cookie); //获取客户端所有cookie Cookie[] cookies = request.getCookies(); //通过遍历获取每个cookie for (Cookie cookie1 : cookies) { System.out.println(cookie1.getName() + &amp;#34; - &amp;#34; + cookie1.getValue()); } } 存活时间 默认情况下, 当浏览器关闭后,内存释放,Cookie会被销毁
使用方法 cookie.setMaxAge(秒) 设置cookie存活时间
而参数有以下含义
正数: 将会cookie写入浏览器所在电脑硬盘,持久化存储到期自动删除 负数: 默认值, Cookie存在于浏览器内存中,浏览器关闭自动销毁 零: 删除对应cookie 存储中文 Cookie不支持存中文, 如果非要存中文可以把中文进行URL编码存进去, 取的时候再解码</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-HTTP</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-http/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-http/</guid>
      <description>请求的数据格式 数据分为三部分
请求行: 请求数据第一行, GET/POST 表示请求方式 / 表示请求路径 HTTP/1.1表示协议版本 请求头: 键值对数据 请求体: POST请求的最后一部分, 存放请求参数 例子:
GET / HTTP/1.1 浏览器能够接受的资源类型 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 浏览器可以支持的压缩类型 Accept-Encoding: gzip, deflate, br 浏览器偏好语言 Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7 Cache-Control: max-age=0 Connection: keep-alive Cookie: 请求主机名 Host: www.baidu.com Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1 Upgrade-Insecure-Requests: 1 浏览器版本 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 sec-ch-ua: &amp;#34;Chromium&amp;#34;;v=&amp;#34;106&amp;#34;, &amp;#34;Google Chrome&amp;#34;;v=&amp;#34;106&amp;#34;, &amp;#34;Not;A=Brand&amp;#34;;v=&amp;#34;99&amp;#34; sec-ch-ua-mobile: ?0 sec-ch-ua-platform: &amp;#34;Windows&amp;#34; GET请求参数在请求行中.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Servlet</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-tomcat/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-tomcat/</guid>
      <description>快速入门 创建web项目,导入servlet坐标
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Tomcat 10 使用这个--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 简单使用例
package com.eoezora.controller; import jakarta.servlet.ServletException; import jakarta.servlet.annotation.WebServlet; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(&amp;#34;/test&amp;#34;) // 访问路径是 /test public class TestController extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(&amp;#34;get&amp;#34;); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(&amp;#34;post&amp;#34;); } } urlPattern配置 Servlet想要被访问,就必须设置其访问路径 (urlPattern)</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-请求和响应</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</guid>
      <description>介绍 Request: 获取请求数据 Response: 设置响应数据 Request 获取请求数据 一些需要了解的方法
@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // http://localhost:8080/EoeWebDemo_war/test?username=aas&amp;amp;password=1234567 // 请求行的数据 req.getMethod(); // GET 提交方法 req.getContextPath(); // EoeWebDemo_war 虚拟路径 req.getRequestURL(); // http://localhost:8080/EoeWebDemo_war/test req.getRequestURI(); // /EoeWebDemo_war/test req.getQueryString(); // username=aas&amp;amp;password=1234567 //请求头的数据, 根据请求头名称获取值 req.getHeader(&amp;#34;User-Agent&amp;#34;); //Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //获取POST请求体的数据 //获取流对象 // BufferedReader getReader()：获取字符输入流 只能操作字符数据 // ServletInputStream getInputStream()：获取字节输入流 可以操作所有类型数据 req.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-过滤器</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-filter%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-filter%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>概念 Filter过滤器,是JavaWeb三大组件之一(Servlet, Filter, Listener) 过滤器可以把资源拦截下来,从而实现一些需求 过滤器一般完成一些通用操作,如访问权限控制, 统一编码处理, 铭感字符处理等 快速入门 定义类,实现Filter接口，重写所有方法
public class FilterDemo implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { Filter.super.init(filterConfig); } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { } @Override public void destroy() { Filter.super.destroy(); } } 配置Filter拦截路径, 使用@WebFilter注解
@WebFilter(&amp;#34;/*&amp;#34;) //表示拦截所有访问 public class FilterDemo implements Filter { } 放行
@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { //放行前逻辑 //对request进行处理 //放行请求 chain.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-MyBatis-增删改查</title>
      <link>https://eoezora.github.io/posts/mybatis/mybatis-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis/mybatis-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>增删改查例子 AccountMapper.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34;&amp;gt; &amp;lt;!-- namespace是映射接口的路径 --&amp;gt; &amp;lt;mapper namespace=&amp;#34;com.eoezora.mybatisDemo.mapper.AccountMapper&amp;#34;&amp;gt; &amp;lt;!-- 添加数据, 参数POJO -&amp;gt; EoeAccount --&amp;gt; &amp;lt;!-- 添加这两个 useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34; 属性在insert标签里可以返回主键 --&amp;gt; &amp;lt;insert id=&amp;#34;addAccount&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34;/&amp;gt; &amp;lt;insert id=&amp;#34;addAccount&amp;#34; &amp;gt; INSERT INTO account (name, age, brithDay, location) &amp;lt;!-- 这里的名字要与POJO类力的变量名一致 --&amp;gt; VALUES (#{name},#{age},#{brithDay},#{location}); &amp;lt;/insert&amp;gt; &amp;lt;!-- 删除一条数据 --&amp;gt; &amp;lt;delete id=&amp;#34;delAccouintById&amp;#34;&amp;gt; DELETE FROM account WHERE id = #{id} &amp;lt;/delete&amp;gt; &amp;lt;!-- 删除多条数据 --&amp;gt; &amp;lt;delete id=&amp;#34;delAccouintByIds&amp;#34;&amp;gt; DELETE FROM account WHERE id in &amp;lt;!</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-MyBatis快速入门笔记</title>
      <link>https://eoezora.github.io/posts/mybatis/mybatis/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis/mybatis/</guid>
      <description>简介: 一个用于数据持久层的框架
基本配置 //mybatis配置文件 String resource = &amp;#34;mybatis-config.xml&amp;#34;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try (SqlSession session = sqlSessionFactory.openSession()) { //此处是直接调用方法进行操作，建议使用代理开发 List&amp;lt;EoeAccount&amp;gt; datas = session.selectList(&amp;#34;test.selectAll&amp;#34;); datas.forEach(System.out::println); session.close(); } Mybatis配置文件(mybatis-config.xml)
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34; &amp;#34;https://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;environments default=&amp;#34;development&amp;#34;&amp;gt; &amp;lt;environment id=&amp;#34;development&amp;#34;&amp;gt; &amp;lt;transactionManager type=&amp;#34;JDBC&amp;#34;/&amp;gt; &amp;lt;dataSource type=&amp;#34;POOLED&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driver&amp;#34; value=&amp;#34;com.mysql.cj.jdbc.Driver&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/eoezora?useSSL=false&amp;amp;amp;allowPublicKeyRetrieval=true&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;root&amp;#34;/&amp;gt; &amp;lt;/dataSource&amp;gt; &amp;lt;/environment&amp;gt; &amp;lt;/environments&amp;gt; &amp;lt;mappers&amp;gt; &amp;lt;mapper resource=&amp;#34;mappers/TestDemoMapper.xml&amp;#34;/&amp;gt; &amp;lt;/mappers&amp;gt; &amp;lt;/configuration&amp;gt; SQL语句映射文件(TestDemoMapper.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-MyBatis配置文件</title>
      <link>https://eoezora.github.io/posts/mybatis/mybatis-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis/mybatis-%E9%85%8D%E7%BD%AE/</guid>
      <description>简介</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-JDBC-API详解</title>
      <link>https://eoezora.github.io/posts/jdbc-note/api%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/jdbc-note/api%E8%AF%A6%E8%A7%A3/</guid>
      <description>DriverManager //创建一个链接 String url = &amp;#34;jdbc:mysql://localhost/database?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;#34;; String user = &amp;#34;&amp;#34;; String pwd = &amp;#34;&amp;#34;; Connection connection = DriverManager.getConnection(url,user,pwd); Connection 用于获取执行SQL的对象和管理事务
//创建链接 Connection connection = DriverManager.getConnection(url,user,pwd); //要执行的SQL语句 String sql = &amp;#34;UPDATE users SET money = 1000 WHERE id = 114514;&amp;#34;; //创建执行对象 Statement statement = connection.createStatement(); try { //开启事务 connection.setAutoCommit(false); //执行语句 statement.executeUpdate(sql); //事务提交 connection.commit(); } catch (Exception e) { //若执行失败则回滚事务 connection.rollback(); throw new RuntimeException(e); } Statement 作用：执行SQL语句
//执行DML DDL 语句， 增删改，返回受影响的行数 int executeUpdate(String sql) //执行DQL语句 返回ResultSet结果集对象,查询语句 ResultSet executeQuery(String sql) ResultSet 作用：一个结果集对象，封装了DQL查询语句的结果</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-JDBC-连接池</title>
      <link>https://eoezora.github.io/posts/jdbc-note/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/jdbc-note/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>简介: 数据库连接池是个容器, 负责分配, 管理数据库链接, 允许应用程序重复使用现有的数据库链接, 而不是重新建立一个新连接
标准接口: DataSource
Druid配置文件 url=jdbc:mysql:///eoezora?useSSL=false&amp;amp;allowPublicKeyRetrieval=true username=root password=root #初始化连接数量 initialSize=5 #最大连接数 maxActive=10 #最大等待时间 ms maxWait=3000 加载配置 //1.加载配置文件 Properties pro = new Properties(); InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&amp;#34;druid.properties&amp;#34;); pro.load(is); //2.获取连接池对象 DataSource ds = DruidDataSourceFactory.createDataSource(pro); //3.获取连接 Connection conn = ds.getConnection(); 归还连接|释放资源 public static void close(ResultSet rs, Statement stmt, Connection conn){ if (rs!=null) { try { rs.close(); } catch (Exception e) { System.out.println(e.getMessage()); } } if (stmt!=null) { try { stmt.</description>
    </item>
    
  </channel>
</rss>
