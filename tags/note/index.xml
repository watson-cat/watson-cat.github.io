<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>note on 学習のメモ</title>
    <link>https://eoezora.github.io/tags/note/</link>
    <description>Recent content in note on 学習のメモ</description>
    <image>
      <url>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eoezora.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaWEB笔记-MyBatis-Plus</title>
      <link>https://eoezora.github.io/posts/mybatis-plus/mybatis-plus/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis-plus/mybatis-plus/</guid>
      <description>快速使用 ​	MybatisPlus为我们提供了非常强大的接口来供我们对数据库进行增删改查操作,我们无需写sql语句,只需调用对应接口即可.
引入maven坐标 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;xxxx&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 编写实体类 @Data //@TableName 指定这个实体类在操作时影响哪张表 @TableName(&amp;#34;tb_users&amp;#34;) public class UserEntity { private int id; private String username; private String password; private int age; private int telephone; private int duties; } 编写Mapper接口 @Mapper public interface UserMapper extends BaseMapper&amp;lt;UserEntity&amp;gt; { //只需要让我们的Mapper接口继承 BaseMapper并给他对应实体类即可 } 使用 @Autowired private UserMapper userMapper; @Override public void addTestData() { UserEntity ue = new UserEntity(); ue.setUsername(&amp;#34;eoezora&amp;#34;); ue.setPassword(&amp;#34;a-test-password&amp;#34;); ue.setAge(24); ue.setTelephone(1145141919); ue.setDuties(1); userMapper.insert(ue); } @Override public List&amp;lt;UserEntity&amp;gt; getAllData() { return userMapper.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring异常处理</title>
      <link>https://eoezora.github.io/posts/spring/spring-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>异常处理器 出现异常现象的常见位置与诱因如下:
框架内部抛出的异常: 使用不合规导致
数据层抛出的异常: 因外部服务器故障导致(如: 服务器访问超时)
业务层抛出的异常: 因业务逻辑编写错误导致(如: 遍历业务编写不当, 导致索引异常)
表现层抛出的异常: 因数据收集, 检验等规则导致(如: 不匹配的数据类型)
工具类抛出的异常: 因工具类编写不严谨(如: 必要的释放的链接长期未释放等)
所有异常均抛到表现层进行处理
定义一个异常处理器 //与表现层的注解一致, 我使用的时rest风格的所以使用下面那个 @RestControllerAdvice //@ControllerAdvice @RestControllerAdvice public class UserExceptionAdvice { /** * 括号里是要处理的异常类型 * 当出现异常时, 会调用下面这个方法进行处理 **/ @ExceptionHandler(Exception.class) public Result&amp;lt;Object&amp;gt; doException(Exception e) { return Result.error(&amp;#34;错误, 出现异常&amp;#34;); } } 项目异常处理方案 业务异常(BusinessException) 规范的用户行为产生的异常
不规范的用户行为操作产生的异常
解决方案: 发送对应消息给用户, 提醒规范操作
系统异常(SystemException) 项目运行过程中可预计但不可避免的异常
解决方案: 发送固定消息给用户.安抚用户, 发送特定消息给运维人员,提醒维护, 记录日志
其他异常(Exception) 开发者未预期到的异常
解决方案: 发送固定消息给用户.安抚用户, 发送特定消息给运维人员,提醒维护, 记录日志
项目中的使用 自定义异常
/** * 定义一个自定义异常 * code 是状态码 */ public class BusinessException extends RuntimeException{ private Integer code; public BusinessException() { } public BusinessException(int code, String message) { super(message); this.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-SpringMVC</title>
      <link>https://eoezora.github.io/posts/spring/spring-mvc/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-mvc/</guid>
      <description>快速入门 SpringMVC与Tomcat整合 需要注意的是Tomcat 10与spring mvc不兼容. 请使用tomcat 8
导入maven坐标 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax-servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 创建控制类 //@Controller 注解表示这是一个Spring Bean @Controller public class AccountController { //访问入口 @RequestMapping(&amp;#34;/sign-in&amp;#34;) //设置返回值为响应内容 @ResponseBody public String OnAccountSignIn() { System.out.println(&amp;#34;Account: Sign In&amp;#34;); return &amp;#34;{&amp;#39;msg&amp;#39;:&amp;#39;success&amp;#39;}&amp;#34;; } } 创建Spring配置类 /** * Spring配置类 * 设置组件扫描路径,加载Bean */ @Configuration @ComponentScan(&amp;#34;com.eoezora&amp;#34;) public class SpringConfig { } 创建SpringMVC配置 /** * 定义一个Servlet容器启动的配置类,在里面加载Spring的配置 */ public class ServletContainersInitConfig extends AbstractDispatcherServletInitializer { /** * 加载Spring mvc 容器配置 * SpringMVC的配置 */ @Override protected WebApplicationContext createServletApplicationContext() { AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext(); //SpringMVConfig.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring事务</title>
      <link>https://eoezora.github.io/posts/spring/spring-%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-%E4%BA%8B%E5%8A%A1/</guid>
      <description>简介 事务作用: 在数据层保证一系列数据库操作同时成功或同时失败
Spring事务作用: 在数据层或业务层的一些列数据库操作同时成功或同时失败
例子 通过相同的数据源DataSource来管理sql的事务
在业务层的接口上, 要添加Spring事务的方法上添加注解 @Transactional, 一般是使用在业务层接口上,不会用在实现类上. @Transactional也可以使用在类上,使用在类上表示该类所有方法都开启事务 设置事务管理器 @Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(); transactionManager.setDataSource(dataSource); return transactionManager; } 在Spring设置里打开注解事务驱动 //开起启用注解事务 @EnableTransactionManagement //事务简单例子 //本方法中有三个事务分别是 test_Tran() print_a() print_b() //在实际运行中print_a()和print_b()会加入到test_Tran()中形成一个新的事务, 从而实现print_a()和print_b()的同时成功或同时失败 @Transactional public void test_Tran(){ common.print_a(); //... common.print_b(); } class common { @Transactional public void print_a() { sout(&amp;#34;2333&amp;#34;); } @Transactional public void print_b() { sout(&amp;#34;12345&amp;#34;); } } 事务角色 事务管理员: 发起事务方, 在Spring中通常指代业务开始事务的方法
事务协调员: 加入事务方, 在Spring中通常指数据层方法,也可以是业务层方法</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-SpringBoot</title>
      <link>https://eoezora.github.io/posts/spring/spring-boot/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-boot/</guid>
      <description>Maven坐标 &amp;lt;!--德鲁伊连接池--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.13-SNSAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; </description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring拦截器</title>
      <link>https://eoezora.github.io/posts/spring/spring-%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description>入门案例 定义一个拦截器Bean,实现HandlerInterceptor接口
@Component public class UserInterceptor implements HandlerInterceptor { //拦截之前触发 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(&amp;#34;preHandle&amp;#34;); //返回false表示不放行 中止原始操作, 也会影响拦截器链的运行 return true; } //拦截之后触发 @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(&amp;#34;postHandle&amp;#34;); HandlerInterceptor.super.postHandle(request, response, handler, modelAndView); } //拦截完成后触发 @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(&amp;#34;afterCompletion&amp;#34;); HandlerInterceptor.super.afterCompletion(request, response, handler, ex); } } 定义配置类, 继承WebMvcConfigurationSupport实现addInterceptors()方法 或者 在SpringMvcConfig里实现WebMvcConfigurer接口</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring整合mybatis</title>
      <link>https://eoezora.github.io/posts/spring/spring-%E6%95%B4%E5%90%88mybatis/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-%E6%95%B4%E5%90%88mybatis/</guid>
      <description>Maven坐标 &amp;lt;!--德鲁伊连接池--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.13-SNSAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--数据库连接组件--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mybatis--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.11&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring操作数据库需要的--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring整合mybatis需要的--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; JDBC配置类 public class JDBCConfig { @Value(&amp;#34;${jdbc.url}&amp;#34;) private String url; @Value(&amp;#34;${jdbc.username}&amp;#34;) private String username; @Value(&amp;#34;${jdbc.password}&amp;#34;) private String password; private String driverClass = &amp;#34;com.mysql.jdbc.Driver&amp;#34;; @Bean public DataSource dataSource() { DruidDataSource druidDataSource = new DruidDataSource(); druidDataSource.setDriverClassName(driverClass); druidDataSource.setUrl(url); druidDataSource.setUsername(username); druidDataSource.setPassword(password); return druidDataSource; } } Mybatis配置类 public class MybatisConfig { @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource) { //创建SqlSessionFactoryBean SqlSessionFactoryBean sfb = new SqlSessionFactoryBean(); //设置mybatis别名扫描 sfb.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring-AOP</title>
      <link>https://eoezora.github.io/posts/spring/spring-aop%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-aop%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>简介 AOP: 面向切面编程, 一种编程范式,指导开发者如何组织程序结构
作用: 在不惊动原始设计的基础上进行功能增强
Spring理念: 无入侵式\无侵入式 编程
代理(Proxy): 本质是采用代理模式实现
切入点(PointCut): 匹配连接点的式子, 可以理解成共性功能的方法描述
连接点(JoinPoint): 可以被增强的方法, 可以理解成任意方法
通知(Advice): 要添加的功能, 共性功能,
切面(Aspect): 把通知应用到切入点的过程
目标对象(Target): 被代理的原始对象的目标对象
简单例子 Spring自带aop相关依赖,这里只需要导入Aspectj即可
导入Maven坐标 &amp;lt;!--aspectj坐标--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.9.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 通知类 /** * 通知类 * @Aspect 告诉Spring这是个AOP增强 */ @Component @Aspect public class AOPAdvice { /** * 定义一个 &amp;lt;切入点&amp;gt; * @Pointcut 切入点注解 * &amp;#34;execution(void com.eoezora.aop_spring.dao.BookDao.update())&amp;#34; 执行目标包下的某个方法 */ @Pointcut(&amp;#34;execution(void com.eoezora.aop_spring.dao.BookDao.update())&amp;#34;) private void commonUpdate() {} /** * 定义一个 &amp;lt;通知&amp;gt; 方法 * @Before 在方法执行前通知 * @After 在方法执行后通知 * @AfterReturning 放回后通知 * @AfterThrowing 发生异常后通知 * @Around 在方法执行前和执行后通知 */ @Before(&amp;#34;commonUpdate()&amp;#34;) public void commonMethod() { System.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Spring核心容器</title>
      <link>https://eoezora.github.io/posts/spring/spring-ioc%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-ioc%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>控制反转Ioc 使用对象时,由主动new产生对象转换为由外部提供对象, 此过程中创建对象控制权由程序转移到外部,此思想称为控制反转
Spring对Ioc思想的实现
Spring提供了一个容器,称为Ioc容器，用来充当Ioc思想中的&amp;quot;外部&amp;quot; Ioc容器负责对象创建,初始化等一系工作, 被创建或被管理的对象在Ioc容器中被称为Bean DI(Dependency Injection): 依赖注入
在容器中建立的Bean与Bean之间的依赖关系的整个过程,称为依赖注入 目标: 充分解耦
使用Ioc容器管理Bean 在Ioc容器内将有依赖关系的Bean进行关系绑定(DI) 适合给容器管理的Bean
表现层对象 业务层对象 数据层对象 工具对象 不适合给容器管理的Bean
封装实体的域对象 xml配置Bean 一个Bean配置文件
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;!--id为Bean名字--&amp;gt; &amp;lt;!--name 为bean起别名--&amp;gt; &amp;lt;!--Class是bean接口对应实现类--&amp;gt; &amp;lt;!--scope时bean的作用范围,默认singleton单例 | prototype非单例 --&amp;gt; &amp;lt;bean id=&amp;#34;bookInfo&amp;#34; class=&amp;#34;com.eoezora.springdemo.dao.impl.PysBookImpl&amp;#34;/&amp;gt; &amp;lt;!--id为Bean名字 Class是bean接口对应实现类--&amp;gt; &amp;lt;bean id=&amp;#34;bookService&amp;#34; class=&amp;#34;com.eoezora.springdemo.services.impl.BookServerImpl&amp;#34;&amp;gt; &amp;lt;!--配置当前Bean的属性--&amp;gt; &amp;lt;!--name属性表示配置哪一个属性--&amp;gt; &amp;lt;!--ref表示参照哪个Bean--&amp;gt; &amp;lt;property name=&amp;#34;bookInfo&amp;#34; ref=&amp;#34;bookInfo&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; Java使用代码
public static void main(String[] args) { //根据配置文件获取IoC容器 ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;#34;applicationContext.xml&amp;#34;); //ctx.getBean(bean的id); BookService bookService = (BookService) ctx.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-会话跟踪技术</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF/</guid>
      <description>会话 会话:客户端跟服务端的连接,会话建立后直到一方断开连接才会结束.在一次会话中可以包含多次请求和响应 会话跟踪:服务端会识别多个请求是否来自同一个客户端,以便在同次会话的多次请求间共享数据 HTTP协议是无状态的,每次客户端向服务端请求时。服务端都会将该请求视为新的请求,因此我们需要会话跟踪技术来实现会话内数据共享 实现方式: 客户端会话跟踪技术: Cookie 服务端跟会话踪技术: Session Cokkie 客户端会话技术,将数据保存在客户端,以后每次请求都携带Cookie数据进行访问
基本使用 @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //创建Cookie对象 Cookie cookie = new Cookie(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //发送cookie到客户端 response.addCookie(cookie); //获取客户端所有cookie Cookie[] cookies = request.getCookies(); //通过遍历获取每个cookie for (Cookie cookie1 : cookies) { System.out.println(cookie1.getName() + &amp;#34; - &amp;#34; + cookie1.getValue()); } } 存活时间 默认情况下, 当浏览器关闭后,内存释放,Cookie会被销毁
使用方法 cookie.setMaxAge(秒) 设置cookie存活时间
而参数有以下含义
正数: 将会cookie写入浏览器所在电脑硬盘,持久化存储到期自动删除 负数: 默认值, Cookie存在于浏览器内存中,浏览器关闭自动销毁 零: 删除对应cookie 存储中文 Cookie不支持存中文, 如果非要存中文可以把中文进行URL编码存进去, 取的时候再解码</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-HTTP</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-http/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-http/</guid>
      <description>请求的数据格式 数据分为三部分
请求行: 请求数据第一行, GET/POST 表示请求方式 / 表示请求路径 HTTP/1.1表示协议版本 请求头: 键值对数据 请求体: POST请求的最后一部分, 存放请求参数 例子:
GET / HTTP/1.1 浏览器能够接受的资源类型 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 浏览器可以支持的压缩类型 Accept-Encoding: gzip, deflate, br 浏览器偏好语言 Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7 Cache-Control: max-age=0 Connection: keep-alive Cookie: 请求主机名 Host: www.baidu.com Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1 Upgrade-Insecure-Requests: 1 浏览器版本 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 sec-ch-ua: &amp;#34;Chromium&amp;#34;;v=&amp;#34;106&amp;#34;, &amp;#34;Google Chrome&amp;#34;;v=&amp;#34;106&amp;#34;, &amp;#34;Not;A=Brand&amp;#34;;v=&amp;#34;99&amp;#34; sec-ch-ua-mobile: ?0 sec-ch-ua-platform: &amp;#34;Windows&amp;#34; GET请求参数在请求行中.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-Servlet</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-tomcat/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-tomcat/</guid>
      <description>快速入门 创建web项目,导入servlet坐标
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Tomcat 10 使用这个--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 简单使用例
package com.eoezora.controller; import jakarta.servlet.ServletException; import jakarta.servlet.annotation.WebServlet; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(&amp;#34;/test&amp;#34;) // 访问路径是 /test public class TestController extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(&amp;#34;get&amp;#34;); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(&amp;#34;post&amp;#34;); } } urlPattern配置 Servlet想要被访问,就必须设置其访问路径 (urlPattern)</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-过滤器</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-filter%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-filter%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>概念 Filter过滤器,是JavaWeb三大组件之一(Servlet, Filter, Listener) 过滤器可以把资源拦截下来,从而实现一些需求 过滤器一般完成一些通用操作,如访问权限控制, 统一编码处理, 铭感字符处理等 快速入门 定义类,实现Filter接口，重写所有方法
public class FilterDemo implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { Filter.super.init(filterConfig); } @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { } @Override public void destroy() { Filter.super.destroy(); } } 配置Filter拦截路径, 使用@WebFilter注解
@WebFilter(&amp;#34;/*&amp;#34;) //表示拦截所有访问 public class FilterDemo implements Filter { } 放行
@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { //放行前逻辑 //对request进行处理 //放行请求 chain.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-MyBatis-增删改查</title>
      <link>https://eoezora.github.io/posts/mybatis/mybatis-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis/mybatis-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>增删改查例子 AccountMapper.xml &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34;&amp;gt; &amp;lt;!-- namespace是映射接口的路径 --&amp;gt; &amp;lt;mapper namespace=&amp;#34;com.eoezora.mybatisDemo.mapper.AccountMapper&amp;#34;&amp;gt; &amp;lt;!-- 添加数据, 参数POJO -&amp;gt; EoeAccount --&amp;gt; &amp;lt;!-- 添加这两个 useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34; 属性在insert标签里可以返回主键 --&amp;gt; &amp;lt;insert id=&amp;#34;addAccount&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34;/&amp;gt; &amp;lt;insert id=&amp;#34;addAccount&amp;#34; &amp;gt; INSERT INTO account (name, age, brithDay, location) &amp;lt;!-- 这里的名字要与POJO类力的变量名一致 --&amp;gt; VALUES (#{name},#{age},#{brithDay},#{location}); &amp;lt;/insert&amp;gt; &amp;lt;!-- 删除一条数据 --&amp;gt; &amp;lt;delete id=&amp;#34;delAccouintById&amp;#34;&amp;gt; DELETE FROM account WHERE id = #{id} &amp;lt;/delete&amp;gt; &amp;lt;!-- 删除多条数据 --&amp;gt; &amp;lt;delete id=&amp;#34;delAccouintByIds&amp;#34;&amp;gt; DELETE FROM account WHERE id in &amp;lt;!</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-MyBatis配置文件</title>
      <link>https://eoezora.github.io/posts/mybatis/mybatis-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis/mybatis-%E9%85%8D%E7%BD%AE/</guid>
      <description>简介</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-请求和响应</title>
      <link>https://eoezora.github.io/posts/javaweb/javaweb-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/javaweb/javaweb-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</guid>
      <description>介绍 Request: 获取请求数据 Response: 设置响应数据 Request 获取请求数据 一些需要了解的方法
@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // http://localhost:8080/EoeWebDemo_war/test?username=aas&amp;amp;password=1234567 // 请求行的数据 req.getMethod(); // GET 提交方法 req.getContextPath(); // EoeWebDemo_war 虚拟路径 req.getRequestURL(); // http://localhost:8080/EoeWebDemo_war/test req.getRequestURI(); // /EoeWebDemo_war/test req.getQueryString(); // username=aas&amp;amp;password=1234567 //请求头的数据, 根据请求头名称获取值 req.getHeader(&amp;#34;User-Agent&amp;#34;); //Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //获取POST请求体的数据 //获取流对象 // BufferedReader getReader()：获取字符输入流 只能操作字符数据 // ServletInputStream getInputStream()：获取字节输入流 可以操作所有类型数据 req.</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-MyBatis快速入门笔记</title>
      <link>https://eoezora.github.io/posts/mybatis/mybatis/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mybatis/mybatis/</guid>
      <description>简介: 一个用于数据持久层的框架
基本配置 //mybatis配置文件 String resource = &amp;#34;mybatis-config.xml&amp;#34;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try (SqlSession session = sqlSessionFactory.openSession()) { //此处是直接调用方法进行操作，建议使用代理开发 List&amp;lt;EoeAccount&amp;gt; datas = session.selectList(&amp;#34;test.selectAll&amp;#34;); datas.forEach(System.out::println); session.close(); } Mybatis配置文件(mybatis-config.xml)
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34; &amp;#34;https://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;environments default=&amp;#34;development&amp;#34;&amp;gt; &amp;lt;environment id=&amp;#34;development&amp;#34;&amp;gt; &amp;lt;transactionManager type=&amp;#34;JDBC&amp;#34;/&amp;gt; &amp;lt;dataSource type=&amp;#34;POOLED&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driver&amp;#34; value=&amp;#34;com.mysql.cj.jdbc.Driver&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/eoezora?useSSL=false&amp;amp;amp;allowPublicKeyRetrieval=true&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;root&amp;#34;/&amp;gt; &amp;lt;/dataSource&amp;gt; &amp;lt;/environment&amp;gt; &amp;lt;/environments&amp;gt; &amp;lt;mappers&amp;gt; &amp;lt;mapper resource=&amp;#34;mappers/TestDemoMapper.xml&amp;#34;/&amp;gt; &amp;lt;/mappers&amp;gt; &amp;lt;/configuration&amp;gt; SQL语句</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-JDBC-API详解</title>
      <link>https://eoezora.github.io/posts/jdbc-note/api%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/jdbc-note/api%E8%AF%A6%E8%A7%A3/</guid>
      <description>DriverManager //创建一个链接 String url = &amp;#34;jdbc:mysql://localhost/database?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;#34;; String user = &amp;#34;&amp;#34;; String pwd = &amp;#34;&amp;#34;; Connection connection = DriverManager.getConnection(url,user,pwd); Connection 用于获取执行SQL的对象和管理事务
//创建链接 Connection connection = DriverManager.getConnection(url,user,pwd); //要执行的SQL语句 String sql = &amp;#34;UPDATE users SET money = 1000 WHERE id = 114514;&amp;#34;; //创建执行对象 Statement statement = connection.createStatement(); try { //开启事务 connection.setAutoCommit(false); //执行语句 statement.executeUpdate(sql); //事务提交 connection.commit(); } catch (Exception e) { //若执行失败则回滚事务 connection.rollback(); throw new RuntimeException(e); } Statement 作用：执行SQL语句
//执行DML DDL 语句， 增删改，返回受影响的行数 int executeUpdate(String sql) //执行DQL语句 返回ResultSet结果集对象,查询语句 ResultSet executeQuery(String sql) ResultSet 作用：一个结果集对象，封装了DQL查询语句的结果</description>
    </item>
    
    <item>
      <title>JavaWEB笔记-JDBC-连接池</title>
      <link>https://eoezora.github.io/posts/jdbc-note/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/jdbc-note/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>简介: 数据库连接池是个容器, 负责分配, 管理数据库链接, 允许应用程序重复使用现有的数据库链接, 而不是重新建立一个新连接
标准接口: DataSource
Druid配置文件 url=jdbc:mysql:///eoezora?useSSL=false&amp;amp;allowPublicKeyRetrieval=true username=root password=root #初始化连接数量 initialSize=5 #最大连接数 maxActive=10 #最大等待时间 ms maxWait=3000 加载配置 //1.加载配置文件 Properties pro = new Properties(); InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&amp;#34;druid.properties&amp;#34;); pro.load(is); //2.获取连接池对象 DataSource ds = DruidDataSourceFactory.createDataSource(pro); //3.获取连接 Connection conn = ds.getConnection(); 归还连接|释放资源 public static void close(ResultSet rs, Statement stmt, Connection conn){ if (rs!=null) { try { rs.close(); } catch (Exception e) { System.out.println(e.getMessage()); } } if (stmt!=null) { try { stmt.</description>
    </item>
    
    <item>
      <title>Mysql笔记-数据库设计-多表查询</title>
      <link>https://eoezora.github.io/posts/mysql-note/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mysql-note/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</guid>
      <description>多表查询 连接查询 内连接 获取两表的交集数据
-- 隐式写法 SELECT 字段列表 FROM 表1, 表2... WHERE 条件; -- 显示写法 SELECT 字段列表 FROM 表1 INNER JOIN 表2 ON 条件 外连接 左外连接: 相当于查询A表所有数据和交集部分的数据
右外连接: 相当于查询B表所有数据和交集部分的数据
-- 左外连接 SELECT 字段列表 FROM 表1 LEFT OUTER JOIN 表2 ON 条件 -- 右外连接 SELECT 字段列表 FROM 表1 RIGHT OUTER JOIN 表2 ON 条件 子查询 概念：查询中嵌套查询,根据查询结果不同，作用不同分为 单行单列，多行单列，多行多列
-- 单行单列: 作为条件值 使用 = != &amp;gt; &amp;lt; 进行条件判断 SELECT 字段列表 FROM 表 WHERE 字段名 = (子查询语句); -- 多行单列: 作为条件值 SELECT 字段列表 FROM 表 WHERE 字段名 IN (子查询语句); -- 多行多列: 作为虚拟表 SELECT 字段列表 FROM (子查询语句) WHERE 条件; -- 例子 查询工资大于 蔡徐坤 的数据 SELECT name FROM users WHERE money &amp;gt; (SELECT money FROM infos WHERE name = &amp;#34;蔡徐坤&amp;#34;); </description>
    </item>
    
    <item>
      <title>Mysql笔记-数据库设计-表之间的关系</title>
      <link>https://eoezora.github.io/posts/mysql-note/%E8%A1%A8%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mysql-note/%E8%A1%A8%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB/</guid>
      <description>表之间的关系 一对一 例如，用户表和用户信息表(不常用的信息)
实现方式: 在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)
一对多(多对一) 例如：一个部门有多个员工，多个员工属于一个部门
实现方式：在多的一方添加一个外键，指向一的主键,例如 在员工表里添加一个部门ID外键，指向部门表的主键
多对多 例如：商品和订单，一个订单多个商品，一个商品多个订单
实现方式：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键
订单表
id 支付金额 支付方式 状态 1 114514.0 WeChatPay 未支付 2 19198.0 AliPay 已支付 商品表
id 商品名 价格 1 林檎 114514 2 迎宾酒 1919810 中间表
id 订单id(外键) 商品id(外键) 1 1 1 2 1 2 3 2 1 注解：以上方三表为例，中间表记录订单与商品的外键。两个订单id为1的数据代表着这个订单有两件商品
-- 订单与商品关联例子 create table if not exists orders ( id int auto_increment primary key, payment int not null, paytype varchar(20) not null, status varchar(20) not null ); create table if not exists goods ( id int auto_increment primary key, name varchar(60) not null, price int not null ); create table if not exists tk_orders_goods ( id int auto_increment primary key, order_id int not null, good_id int not null ); -- 添加外键 alter table tk_orders_goods add constraint fk_order_id FOREIGN KEY(order_id) REFERENCES orders(id); -- 添加外键 alter table tk_orders_goods add constraint fk_good_id FOREIGN KEY(good_id) REFERENCES goods(id); </description>
    </item>
    
    <item>
      <title>Mysql笔记-事务</title>
      <link>https://eoezora.github.io/posts/mysql-note/%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 29 Sep 2022 21:44:20 +0800</pubDate>
      
      <guid>https://eoezora.github.io/posts/mysql-note/%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务概念 数据库的事务是一种机制，一个操作序列，包含一组数据库操作命令 事务把所有命令作为一个整体向系统提交或撤销。这组命令要么同时成功，要么同时失败 -- 定义事务开启 -- 事务开启后所作的操作为临时性的 BEGIN; -- 也可以使用 START TRANSACTION; UPDATE account SET money = money + 1000 WHERE name = &amp;#39;蔡徐坤&amp;#39;; 假设这行语句错误 UPDATE account SET money = money - 8000 WHERE name = &amp;#39;孙笑川&amp;#39;; -- 提交事务 COMMIT; -- 回滚操作 ROLLBACK; 事务四大特性 原子性：事务是不可分割的最小操作单位，要么同时成功，要么同时失败；
一致性：事务完成后，必须是所有数据都保持一致状态
隔离性：多个事务之间，操作的可见性。每个事务之间操作隔离
持久性：事务一旦提交或者回滚，他对数据库的改变就是永久的
-- 查看事务默认提交方式 SELECT @@autocommit; -- 修改默认提交方式 - 1 自动提交 - 0 手动提交 set @@autocommit = 0; </description>
    </item>
    
    <item>
      <title>Mysql笔记-约束</title>
      <link>https://eoezora.github.io/posts/mysql-note/%E7%BA%A6%E6%9D%9F/</link>
      <pubDate>Thu, 29 Sep 2022 21:44:20 +0800</pubDate>
      
      <guid>https://eoezora.github.io/posts/mysql-note/%E7%BA%A6%E6%9D%9F/</guid>
      <description>约束概念 约束是作用于表中列的规则，用于限制加入表的数据 约束的存在保证数据库数据的正确性，有限性和完整性 约束的分类 约束名称 功能描述 关键字 非空约束 保证列中数据不出现null NOT NULL 唯一约束 保证列中数据各不相同，唯一性 UNIQUE 主键约束 主键是一行数据的唯一标识，要求非空且唯一 PRIMARY KEY 默认约束 保存数据时,未指定就采用默认值 DEFAULT 外键约束 外键让两个表的数据之间建立连接，保证数据一致且完整 FOREIGN KEY 例子 -- 建表时对字段进行约束 CREATE TABLE emp( id INT PRIMARY KEY, -- 唯一主键 ename VARCHAR(60) NOT NULL UNIQUE, -- 非空且唯一 joindate DATE NOT NULL, -- 非空 salary DOUBLE(7,2) NOT NULL, -- 非空 bonus DOUBLE(7,2) DEFAULT 0, -- 默认为0 -- 部门id dept_id INT NOT NULL, -- 添加外键dept_id并关联dept表的id主键 CONSTRAINF fk_emp_dept FOREIGN KEY(dept_id) REFERENCES dept(id) ); 外键约束 员工表(emp)</description>
    </item>
    
    <item>
      <title>Mysql笔记-单表查询</title>
      <link>https://eoezora.github.io/posts/mysql-note/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/mysql-note/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/</guid>
      <description>SELECT -- 字段列表 FROM -- 表名列表 WHERE -- 条件列表 GROUP BY -- 分组列表 HAVING -- 分组后条件 ORDER BY -- 排序字段 LIMIT -- 限制查询返回数据的数量，用于分页限制 条件查询 -- 查询表里许所有数据,不建议使用 SELECT * FROM users; -- 查询名字 -- DISTINCT 去除重复 SELECT DISTINCT name FROM users; -- 查询名字，性别，年龄 -- 可以使用 sex as 性别 的方式对列起别名,也可以写成 sex 性别 省略as 但字段名跟别名之间要有空格隔开 SELECT name, sex as 性别, age as 年龄 FROM users; -- 条件查询符号, NULL值比较使用 IS NOT NULL 跟 IS NULL SELECT name FROM users WHERE age &amp;gt; 17; -- 查询age数值大于17的数据 SELECT name FROM users WHERE age &amp;gt;= 7 AND age &amp;lt;= 50; -- 查询age数值在7跟50之间的数值(写法一) SELECT name FROM users WHERE age BETWEEN 7 AND 50; -- 查询age数值在7跟50之间的数值(写法二) -- 查询brith_day数值在&amp;#39;2000-01-01&amp;#39;跟&amp;#39;2000-04-01&amp;#39;之间的数值(写法二) SELECT name FROM users WHERE brith_day BETWEEN &amp;#39;2000-01-01&amp;#39; AND &amp;#39;2000-04-01&amp;#39;; SELECT name FROM users WHERE age = 17; -- 查询age数值等于17的数据 SELECT name FROM users WHERE age !</description>
    </item>
    
  </channel>
</rss>
