<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Aspectj on 学習のメモ</title>
    <link>https://eoezora.github.io/tags/aspectj/</link>
    <description>Recent content in Aspectj on 学習のメモ</description>
    <image>
      <url>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://eoezora.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 06 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eoezora.github.io/tags/aspectj/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaWEB笔记-Spring-AOP</title>
      <link>https://eoezora.github.io/posts/spring/spring-aop%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eoezora.github.io/posts/spring/spring-aop%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</guid>
      <description>简介 AOP: 面向切面编程, 一种编程范式,指导开发者如何组织程序结构
作用: 在不惊动原始设计的基础上进行功能增强
Spring理念: 无入侵式\无侵入式 编程
切入点: 要追加功能的方法,实际被增强的方法
连接点: 可以被增强的方法
通知: 要添加的功能, 共性功能,
切面: 把通知应用到切入点的过程
简单例子 Spring自带aop相关依赖,这里只需要导入Aspectj即可
导入Maven坐标 &amp;lt;!--aspectj坐标--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.9.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 通知类 /** * 通知类 * @Aspect 告诉Spring这是个AOP增强 */ @Component @Aspect public class AOPAdvice { /** * 定义一个 &amp;lt;切入点&amp;gt; * @Pointcut 切入点注解 * &amp;#34;execution(void com.eoezora.aop_spring.dao.BookDao.update())&amp;#34; 执行目标包下的某个方法 */ @Pointcut(&amp;#34;execution(void com.eoezora.aop_spring.dao.BookDao.update())&amp;#34;) private void commonUpdate() {} /** * 定义一个 &amp;lt;通知&amp;gt; 方法 * @Before 在方法执行前通知 * @After 在方法执行后通知 * @AfterReturning 放回后通知 * @AfterThrowing 发生异常后通知 * @Around 在方法执行前和执行后通知 */ @Before(&amp;#34;commonUpdate()&amp;#34;) public void commonMethod() { System.</description>
    </item>
    
  </channel>
</rss>
